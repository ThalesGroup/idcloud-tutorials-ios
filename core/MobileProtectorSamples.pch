/*
 * Copyright Â© 2020-2023 THALES. All rights reserved.
 */

// IMPORTANT: This source code is intended to serve training information purposes only.
//            Please make sure to review our IdCloud documentation, including security guidelines.

#ifndef GettingStarted_pch
#define GettingStarted_pch

// Import iOS Frameworks
#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>
#import <UserNotifications/UserNotifications.h>

// Import custom frameworks
#import <EzioMobile/EzioMobile.h>

// Helpers common across all samples

@protocol MainViewProtocol <NSObject>

/**
 Caption will be displayed in navigation bar as name of current sample app.
 
 @return Name of sample app.
 */
- (NSString *)caption;

/**
 Common method to display information to user. Currently implemented as simple dialog with app name in caption.
 
 @param result Message to be displayed.
 */
- (void)displayMessageDialog:(NSString *)result;

/**
 Display description of error if it's not nil using displayMessageDialog method.
 
 @param error Application error or nil.
 */
- (void)displayMessageDialogError:(NSError *)error;


/**
 Display generic On / Cancel dialog with asynchronous handler.
 
 @param message Desired dialog message.
 @param handler Completion handler triggered once user will select either option.
 */
- (void)displayOnCancelDialog:(NSString *)message completionHandler:(void (^)(BOOL result))handler;


/**
 Return whenever is loading overlay displayd.
 
 @return YES if loading overlay is present, otherwise NO.
 */
- (BOOL)loadingBarIsPresent;


/**
 Display overlay loading view and call update method so rest of UI might be disabled.
 
 @param caption Text displayed on loading bar.
 @param animated Whenever should be displayed with animation or instantly.
 */
- (void)loadingBarShow:(NSString *)caption animated:(BOOL)animated;


/**
 Hide loading bar if it's present and call update method for rest of UI.
 
 @param animated Whenever should be hide with animation or instantly.
 */
- (void)loadingBarHide:(BOOL)animated;

/**
 Method triggered whenever logic layer is updated so UI can reflect this change.
 
 @return Currently provisioned token. Token is returned so it can be re-used in overriden methods.
 */
- (id<EMOathToken>)updateGUI;


@end

typedef struct
{
    NSInteger current;
    NSInteger max;
}Lifespan;

typedef void (^GenericOtpHandler)(BOOL success, NSString *result, Lifespan lifespan);
typedef void (^GenericHandler)(BOOL success, NSString *result);
typedef void (^AuthPinHandler)(id<EMPinAuthInput> pin);


#endif /* GettingStarted_pch */
