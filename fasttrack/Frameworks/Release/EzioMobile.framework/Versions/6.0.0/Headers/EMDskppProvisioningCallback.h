/* -----------------------------------------------------------------------------
 *
 *     Copyright (c) 2016  -  GEMALTO DEVELOPMENT - R&D
 *
 * -----------------------------------------------------------------------------
 * GEMALTO MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. GEMALTO SHALL NOT BE
 * LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING,
 * MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 *
 * THIS SOFTWARE IS NOT DESIGNED OR INTENDED FOR USE OR RESALE AS ON-LINE
 * CONTROL EQUIPMENT IN HAZARDOUS ENVIRONMENTS REQUIRING FAIL-SAFE
 * PERFORMANCE, SUCH AS IN THE OPERATION OF NUCLEAR FACILITIES, AIRCRAFT
 * NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL, DIRECT LIFE
 * SUPPORT MACHINES, OR WEAPONS SYSTEMS, IN WHICH THE FAILURE OF THE
 * SOFTWARE COULD LEAD DIRECTLY TO DEATH, PERSONAL INJURY, OR SEVERE
 * PHYSICAL OR ENVIRONMENTAL DAMAGE ("HIGH RISK ACTIVITIES"). GEMALTO
 * SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTY OF FITNESS FOR
 * HIGH RISK ACTIVITIES.
 *
 * -----------------------------------------------------------------------------
 */

#import <Foundation/Foundation.h>
#import "EMDskppPinPolicy.h"
#import "EMDskppLocalPinCallback.h"
#import "EMDskppServerPinCallback.h"
#import "EMDskppKeyInformation.h"
#import "EMSecureString.h"



/**
 <p>This callback is invoked when SERVER_PIN type policy is used for the token. In this case,
 Application needs to provide 2 PINs to the SDK:</p>
 <ul>
 <li>A server PIN, which is collected from the end user. the server PIN will be sent to the server to store. On client side it must NOT be stored. It is a user knowledge. Server PIN will be combined with OTP for verification. </li>
 <li>A local PIN, which is normally generated by the application and stored for the token. The local PIN will be used for OTP generation from the SDK.</li>
 </ul>

 @note Please check the pin policy for the requirement on Pin format.
 @param tokenName The name that identifies the token.
 @param dskppPinPolicy Pin policy object that identifies the pin type and pin complexity as well as the valid range of pin length
 @param callback The callback object to the SDK to call after the App has collected the PINs.
 If this block is provided, the App needs to call either method provided by the callback.
 - Since: 4.1
 */
typedef void (^OnServerPinRequestBlock)(NSString *tokenName,
                                        EMDskppPinPolicy *dskppPinPolicy,
                                        id<EMDskppServerPinCallback> callback);

/**
 <p>This callback is invoked when USER_PIN or NO_PIN policy is used for the token.
 When USER_PIN is required, ask for the PIN from the end user. This PIN will be used for OTP generation from the SDK.
 When NO_PIN policy is used, the pin is normally generated by the application and stored for the token. The PIN will be used
 for OTP generation from the SDK.</p>
 @note NO_PIN policy is to be used with caution. Since the OTP generation is not protected by user knowledge. Please check the pin policy for the requirement on Pin format.
 @param tokenName The name that identifies the token.
 @param dskppPinPolicy Pin policy object that identifies the pin type and pin complexity as well as
 the valid range of pin length
 @param callback The callback object to the SDK to call after the App has collected the PIN.
 If this block is provided, the App needs to call either method provided by the callback.
 - Since: 4.1
 */
typedef void (^OnLocalPinRequestBlock)(NSString *tokenName,
                                       EMDskppPinPolicy *dskppPinPolicy,
                                       id<EMDskppLocalPinCallback> callback);


/**
 * This callback is invoked after completion of the provisioning. policyString contains the policies for the token.
 * Application needs to stored it for the token and use it when needed. The policy can be parsed by EMDskppPolicyParser.
 *
 * @param tokenName The name that identifies the token.
 * @param policyString the policy associated with the token.
 * - Since: 4.1
 */
typedef void (^OnPolicyStringProvidedBlock)(NSString *tokenName,
                                            id<EMSecureString> policyString);


/**
 * Callback function to provide data received from the Server by DSKPP
 *
 * @param tokenName tokenName
 * @param XML  The XML String.
 * @param fields
 *            - [in/out] list of new extensions for sending after "OOBS"/
 *            "Push Notification" registration
 *            Example: [fields setObject:@"bbdde3a3-fec8-440a-9a06-0869b1b91f4f" forKey:@"mpdskpp:OobsClientId"];
 * @return 0 for success otherwise returns error code
 * - Since: 4.1
 */
typedef BOOL(^OnPolicyExtensionProvidedBlock)(NSString *tokenName,
                                             id<EMSecureString> XML,
                                             NSMutableDictionary<NSString *, id<EMSecureString>> *fields);

/**
 * This callback is invoked when provisioned is finished. Application needs to save the related key information:
 * eg. tokenSerialNumber for further usage.
 * @param tokenName tokenName
 * @param keyInfo information of the provisioned key
 */

typedef void (^OnKeyProvisionedBlock)(NSString *tokenName, EMDskppKeyInformation *keyInfo);

/**
 * Callback for 4-pass Dskpp provisioning.
 * - Since: 4.1
 */

@interface EMDskppProvisioningCallback : NSObject<NSObject>


/**
 * The OnServerPinRequestBlock to call when SERVER_PIN policy is used for the token, in which case must not be nil.
 * If the policy is not SERVER_PIN, this block will not be invoked. See OnServerPinRequestBlock.
 *
 * @warning If this is implemented, make sure to call appropriate EMDskppServerPinCallback when finished
 * in order for the provisioning process to continue or abort
 * - Since: 4.1
 */
@property (nonatomic, copy) OnServerPinRequestBlock onServerRequestBlock;

/**
 * The OnLocalPinRequestBlock to call when USER_PIN or NO_PIN policy is used for the token, in which case must not be nil.
 * If the policy is not USER_PIN or NO_PIN, this block will not be invoked. See OnLocalPinRequestBlock.
 *
 * @warning If this is implemented, make sure to call appropriate EMDskppLocalPinCallback when finished
 * In order for the provisioning process to continue or abort
 * - Since: 4.1
 */
@property (nonatomic, copy) OnLocalPinRequestBlock onLocalPinRequestBlock;

/**
 * This callback is invoked after completion of the provisioning. policyString contains the policies for the token.
 * Application needs to stored it for the token and use it when needed. The policy can be parsed by DskppPolicyParser
 * - Since: 4.1
 */
@property (nonatomic, copy) OnPolicyStringProvidedBlock onPolicyStringProvidedBlock;

/**
 * Callback function to provide data received from the Server by DSKPP
 * message.
 * - Since: 4.1
 */
@property (nonatomic, copy) OnPolicyExtensionProvidedBlock onPolicyExtensionProvidedBlock;

/**
 * Callback function to provide data received from the Server by DSKPP after the provisioning has completed.
 * - Since: 4.1
 */
@property (nonatomic, copy) OnKeyProvisionedBlock onKeyProvisionedBlock;


/**
 * This callback is invoked when there are extensions to policies. If not used, simply return 'true'.
 *
 * @warning The fields to fill in must coincide with the extension keywords provided by the XML string otherwise the whole provisioning will fail.
 * @param onPolicyExtensionProvidedBlock The block to invoke when there are extentions to policies.
 *
 * - Since: 4.1
 */
- (void)setOnPolicyExtensionProvidedBlock:(BOOL(^)(NSString *tokenName,
                                                   id<EMSecureString> XML,
                                                   NSMutableDictionary<NSString *, id<EMSecureString>> *fields))onPolicyExtensionProvidedBlock;


/**
 * The OnServerPinRequestBlock to call when SERVER_PIN policy is used for the token, in which case must not be nil.
 * If the policy is not SERVER_PIN, this block will not be invoked. See OnServerPinRequestBlock.
 * @warning If this is implemented, make sure to call appropriate EMDskppServerPinCallback when finished
 * in order for the provisioning process to continue or abort
 * @param onServerRequestBlock The block to invoke when SERVER_PIN policy is used.
 * - Since: 4.1
 */
- (void)setOnServerRequestBlock:(void(^)(NSString *tokenName,
                                         EMDskppPinPolicy *dskppPinPolicy,
                                         id<EMDskppServerPinCallback> callback)) onServerRequestBlock;

/**
 * The OnLocalPinRequestBlock to call when USER_PIN or NO_PIN policy is used for the token, in which case must not be nil.
 * If the policy is not USER_PIN or NO_PIN, this block will not be invoked. See OnLocalPinRequestBlock.
 * @warning If this is implemented, make sure to call appropriate EMDskppLocalPinCallback when finished
 * In order for the provisioning process to continue or abort
 * @param onLocalPinRequestBlock The block to invoke when USER_PIN/NO_PIN policy is used.
 * - Since: 4.1
 */
- (void)setOnLocalPinRequestBlock:(void(^)(NSString *tokenName,
                                           EMDskppPinPolicy *dskppPinPolicy,
                                           id<EMDskppLocalPinCallback> callback)) onLocalPinRequestBlock;

/**
 * This callback is invoked after completion of the provisioning. policyString contains the policies for the token.
 * Application needs to stored it for the token and use it when needed. The policy can be parsed by DskppPolicyParser
 * @param onPolicyStringProvidedBlock The block to invoke when provisioning has completed.
 * - Since: 4.1
 */
- (void)setOnPolicyStringProvidedBlock:(void(^)(NSString *tokenName,
                                         id<EMSecureString> policyString))onPolicyStringProvidedBlock;


/**
 * This callback is invoked when provisioned is finished. Application needs to save the related key information:
 * eg. tokenSerialNumber for further usage.
 * @param onKeyProvisionedBlock The block to invoke when the Dskpp provisioning has completed.
 * - Since: 4.1
 */
- (void)setOnKeyProvisionedBlock:(void(^)(NSString *tokenName,
                                          EMDskppKeyInformation *keyInfo))onKeyProvisionedBlock;

@end

