/* -----------------------------------------------------------------------------
 *
 *     Copyright (c)  2019  -  GEMALTO DEVELOPMENT - R&D
 *
 * -----------------------------------------------------------------------------
 * GEMALTO MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. GEMALTO SHALL NOT BE
 * LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING,
 * MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 *
 * THIS SOFTWARE IS NOT DESIGNED OR INTENDED FOR USE OR RESALE AS ON-LINE
 * CONTROL EQUIPMENT IN HAZARDOUS ENVIRONMENTS REQUIRING FAIL-SAFE
 * PERFORMANCE, SUCH AS IN THE OPERATION OF NUCLEAR FACILITIES, AIRCRAFT
 * NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL, DIRECT LIFE
 * SUPPORT MACHINES, OR WEAPONS SYSTEMS, IN WHICH THE FAILURE OF THE
 * SOFTWARE COULD LEAD DIRECTLY TO DEATH, PERSONAL INJURY, OR SEVERE
 * PHYSICAL OR ENVIRONMENTAL DAMAGE ("HIGH RISK ACTIVITIES"). GEMALTO
 * SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTY OF FITNESS FOR
 * HIGH RISK ACTIVITIES.
 *
 * ------------------------------------------------------------------------------
 */

#import <Foundation/Foundation.h>
#import <EzioMobile/EzioMobile.h>
#import "EMTransactionSigningResponse.h"
#import "EMIncomingMessage.h"

NS_ASSUME_NONNULL_BEGIN

/**
 * Supported OTP mode transaction signing
 * - Since: 5.3
 */
typedef NS_ENUM(NSUInteger, EMTransactionSigningOtpMode){
    
    /**
     * Not supported.
     */
    EMTransactionSigningOtpModeUNSUPPORTED,
    
    /**
     * Cap mode1 otp type.
     */
    EMTransactionSigningOtpModeCAP_MODE1,
    
    /**
     * Cap mode2 otp type.
     */
    EMTransactionSigningOtpModeCAP_MODE2,
    
    /**
     * Cap mode2 Tds otp type.
     */
    EMTransactionSigningOtpModeCAP_MODE2_TDS,
    
    /**
     * Cap mode3 otp type.
     */
    EMTransactionSigningOtpModeCAP_MODE3,
    
    /**
     * Oath hotp otp type.
     */
    EMTransactionSigningOtpModeOATH_HOTP,
    
    /**
     * Oath totp otp type.
     */
    EMTransactionSigningOtpModeOATH_TOTP,
    
    /**
     * Oath ocra otp type.
     */
    EMTransactionSigningOtpModeOATH_OCRA
};

/**
 * Interface of a transaction signing request from the OOB server.
 * - Since: 5.3
 */
@interface EMTransactionSigningRequest: EMIncomingMessage<EMMessageMeta>

/**
 * Gets the locale the message is designed for.
 *
 * @return The locale.
 */
@property (nonatomic, copy, readonly) NSString *locale;

/**
 * Gets message subject
 *
 * @return The subject.
 */
@property (nonatomic, copy, readonly) NSString *subject;

/**
 * Gets the OTP type
 *
 * @return OTP type of the transaction signing request.
 */
@property (nonatomic, readonly) EMTransactionSigningOtpMode otpMode;

/**
 * Returns the User Token Identifier (UTI).
 *
 * The UTI is an unsigned value ranging from 0x00 to 0xFF (i.e. 0 to 255).
 * It is generated by the provisioning server and is part of the credential
 * pushed during provisioning. It is guaranteed that two tokens for the
 * same end-user (on authentication server) and from the same EPS domain
 * will never have the same UTI. See the Enrollment and Provisioning Server
 * documentation for domains configuration description.
 *
 * The UTI is defined only if the token has been created with Provisioning
 * Protocol V3 or V5. When the token has been created with Provisioning Protocol
 * V1 or V2 the method returns -1.
 *
 * @return The user token id, -1 if none.
 */
@property (nonatomic, readonly) NSInteger userTokenIdForSigning;

/**
 * Gets the CAP OTP challenge
 * The challenge is used for CAP Mode1 and Mode3.
 *
 * @return challenge of the transaction signing request.
 */
@property (nonatomic, copy, readonly, nullable) NSString *capChallenge;

/**
 * Gets the CAP OTP amount
 * The challenge is used for CAP Mode1.
 *
 * @return amount of the transaction signing request.
 */
@property (nonatomic, copy, readonly, nullable) NSString *capAmount;

/**
 * Gets the CAP OTP currency
 * The challenge is used for CAP Mode1.
 *
 * @return currency of the transaction signing request.
 */
@property (nonatomic, copy, readonly, nullable) NSString *capCurrency;

/**
 * Gets the CAP OTP signing data for CAP Mode2_TDS.
 * Data should only contain digits, maximum 10 digit per data and maximum 10.
 *
 * @return signing data of the transaction signing request.
 */
@property (nonatomic, copy, readonly, nullable) NSMutableArray *capData;

/**
 * Gets the OCRA OTP server challenge
 * This value is available only if the Otp Mode is OCRA.
 *
 * @return OCRA server challenge of the transaction signing request.
 */
@property (nonatomic, copy, readonly, nullable) NSData *ocraServerChallenge;

/**
 * Gets the OCRA OTP client challenge
 * This value is available only if the Otp Mode is OCRA.
 *
 * @return OCRA client challenge of the transaction signing request.
 */
@property (nonatomic, copy, readonly, nullable) NSString *ocraClientChallenge;

/**
 * Gets the OCRA OTP password hash
 * This value is available only if the Otp Mode is OCRA.
 * It depends on the the OCRA suite if password hash is used.
 *
 * @return OCRA password hash of the transaction signing request.
 */
@property (nonatomic, copy, readonly, nullable) NSData *ocraPasswordHash;

/**
 * Gets the OCRA OTP session data
 * This value is available only if the Otp Mode is OCRA.
 *
 * @return OCRA session data of the transaction signing request.
 */
@property (nonatomic, copy, readonly, nullable) NSString *ocraSession;

/**
 * Creates an outgoing response for this transaction signing request message.
 *
 * @param aResponse         The response to provide to the transaction. See enum EMTransactionSigningResponseValue.
 * @param otp               The OTP to send over to OOB server. Can be `nil`only if user denied the transaction.
 * @param aMeta             The metadata for the message.
 *
 * @return The outgoing message ready to be sent.
 */
- (EMOutgoingMessage *)createWithResponse:(EMTransactionSigningResponseValue)aResponse otp:(nullable NSString *)otp meta:(nullable NSDictionary *)aMeta NS_SWIFT_NAME(create(response:otp:meta:));


@end

NS_ASSUME_NONNULL_END
