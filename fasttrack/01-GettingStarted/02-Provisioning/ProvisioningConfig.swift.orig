//  MIT License
//
//  Copyright (c) 2020 Thales DIS
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.

// IMPORTANT: This source code is intended to serve training information purposes only.
// Please make sure to review our IdCloud documentation, including security guidelines.

/**
 Values needed for Token provisioning.
 */
class ProvisioningConfig {

    /**
     The URL of the Enrollment API endpoint, e.g: “https://api/provisioning/pp”

     @return Provision URL
     */
    class func getProvisioningUrl() -> URL {
        return URL(string: "https://provisioner-eps-demo.rnd.gemaltodigitalbankingidcloud.com/provisioner/domains/idcloudpartners/provision")!
    }

    /**
     Identifier for the EPS server’s public RSA key.

     @return RSA key ID.
     */
    class func getRsaKeyId() -> String {
        return "8FD6C71467B77E72FA7F268601F722899ED91CB1"
    }

    /**
     The RSA modulus of the EPS public key (on provisioning protocol level, not transport level).

     @return RSA Key Modulus.
     */
    class func getRsaKeyModulus() -> Data {
        let raw: [UInt8] = [
            0x00,  0xa1,  0x1b,  0x1d,  0xf6,  0xad,  0x6b,  0xd4,  0xf1,  0x84,  0x49,  0x75,  0xfb,  0x72,  0xf3,
            0x62,  0x65,  0xfe,  0x31,  0x7a,  0x1a,  0x3f,  0x40,  0x77,  0x7c,  0xbf,  0x3c,  0x6a,  0xc2,  0xfc,
            0x38,  0x78,  0xf8,  0x98,  0x49,  0xbc,  0x91,  0x64,  0x66,  0x8c,  0x6a,  0x89,  0x4a,  0xb9,  0xe8,
            0x1e,  0xe4,  0xbe,  0xb3,  0x71,  0xa2,  0xdd,  0xa4,  0xc2,  0x19,  0x0b,  0x6e,  0xe9,  0x47,  0x08,
            0xc7,  0x67,  0x8e,  0x42,  0xdb,  0xb3,  0x6d,  0x68,  0xb3,  0x8d,  0x7d,  0x52,  0xf8,  0x34,  0x39,
            0xa9,  0x66,  0x24,  0x93,  0x96,  0x44,  0x8f,  0x87,  0xe2,  0xee,  0x7e,  0x0c,  0x89,  0xca,  0x6b,
            0x2c,  0xa4,  0xa6,  0x2f,  0x68,  0xe9,  0x4e,  0xb7,  0x3a,  0xe5,  0xf4,  0x45,  0x2a,  0xd3,  0xf1,
            0x78,  0x2d,  0x98,  0xbf,  0x52,  0xd8,  0x5f,  0xcb,  0xfd,  0x48,  0x94,  0xbc,  0xfc,  0xf8,  0x0f,
            0x95,  0xba,  0xad,  0x1c,  0x7a,  0x9b,  0x96,  0xae,  0xeb,  0x1a,  0x3c,  0xda,  0x52,  0x84,  0xc6,
            0xdc,  0x55,  0x41,  0xe7,  0x96,  0x7f,  0x21,  0x16,  0x3f,  0xba,  0xc3,  0x61,  0xb9,  0x11,  0xb9,
            0x3e,  0x34,  0x54,  0x10,  0xcc,  0xe0,  0x88,  0x56,  0x67,  0x1e,  0xf1,  0x4b,  0xe7,  0xd5,  0x55,
            0x09,  0x88,  0x16,  0xbd,  0x55,  0x6c,  0xfb,  0x30,  0x4c,  0xc1,  0x01,  0xa6,  0xa2,  0x92,  0xa2,
            0xcc,  0x54,  0xab,  0x15,  0xe8,  0x30,  0x44,  0x34,  0xe3,  0x6a,  0xcd,  0x90,  0x56,  0xa3,  0x6b,
            0x92,  0x4c,  0xf3,  0x12,  0x4c,  0xfd,  0xa8,  0x9c,  0xec,  0xfd,  0x4c,  0xeb,  0x70,  0xed,  0x3e,
            0x97,  0x63,  0xf7,  0xe6,  0xf3,  0xe9,  0x26,  0xde,  0xd7,  0x84,  0x4b,  0x1a,  0x61,  0x86,  0xa3,
            0xea,  0x45,  0xcd,  0x22,  0xdc,  0xa8,  0xb7,  0xaa,  0x97,  0x24,  0x58,  0xa2,  0xab,  0xbe,  0x99,
            0xd4,  0x16,  0x56,  0x43,  0x11,  0x4b,  0x49,  0x23,  0xce,  0x7e,  0x74,  0x1a,  0xef,  0xf4,  0x0d,
            0x84,  0x34,  0x93,  0x5a,  0xdd,  0xe2,  0x53,  0xe4,  0x88,  0x91,  0x66,  0x31,  0x6b,  0x95,  0x68,
            0x12,  0xee,  0x72,  0x33,  0xd5,  0xa5,  0xed,  0x69,  0xe1,  0xd5,  0x0d,  0x02,  0x9d,  0x6c,  0xd5,
            0x01,  0xcd,  0x6b,  0x3b,  0x8d,  0xef,  0xa5,  0x13,  0x04,  0x40,  0x3d,  0x56,  0x65,  0x6c,  0x8b,
            0x8e,  0x62,  0x9c,  0x2d,  0xb1,  0xca,  0x65,  0x64,  0xc2,  0x91,  0x8e,  0x38,  0x80,  0x09,  0x80,
            0xfe,  0x4b,  0xe0,  0xac,  0xf7,  0xb0,  0x2c,  0xa2,  0x88,  0x7b,  0xf0,  0xbc,  0x06,  0x2a,  0xc0,
            0x1f,  0x74,  0xc5,  0x1b,  0xa3,  0x96,  0x11,  0x94,  0x56,  0xe2,  0x99,  0x38,  0xaf,  0xba,  0x9d,
            0xbb,  0x4a,  0x94,  0xa5,  0x2a,  0x09,  0xa9,  0x93,  0xdd,  0x29,  0x73,  0xdf,  0x3c,  0x00,  0x2d,
            0xdf,  0xa2,  0xf4,  0x0b,  0x31,  0xa7,  0x80,  0x7e,  0xac,  0xb4,  0xc3,  0xf2,  0x24,  0x42,  0x55,
            0x9f,  0xcd,  0x14,  0xe5,  0x45,  0x27,  0x0f,  0x6b,  0x1c,  0x85
        ]

        return Data(raw)
    }

    /**
     The RSA exponent of the EPS public key (on provisioning protocol level, not transport level).

     @return RSA Key Exponent.
     */
    class func getRsaKeyExponent() -> Data {
        let raw: [UInt8] = [0x01, 0x00, 0x01]
        return Data(raw)
    }

    /**
     * This configuration will allow to weaken TLS configuration for debug purposes. It’s not allowed to modify in release mode.
     *
     * @return TLS configuration.
     */
    class func getTlsConfiguration() -> EMFastTrackTlsConfiguration {
        return EMFastTrackTlsConfiguration(insecureConnectionAllowed: true, selfSignedCertAllowed: true, hostnameMismatchAllowed: true)
    }

    /**
     Gets the custom fingerprint data.

     @return Custom fingerprint data.
     */
    class func getCustomFingerprintData() -> Data {
        return "CUSTOM_FINGERPRINT_DATA".data(using: .utf8)!
    }

    /**
     Gets the domain.

     @return Domain.
     */
    class func getDomain() -> String {
        return "gtoolrnd"
    }

    /**
     Gets the timestep.
     */
    class func getTimeStep() -> Int {
        return 30
    }
}
